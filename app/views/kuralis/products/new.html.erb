<div class="container-fluid">
  <div class="row mb-4">
    <div class="col">
      <h1 class="h3 mb-0 text-gray-800">Create New Product</h1>
      <p class="text-muted">Create a new product in your Kuralis inventory</p>
    </div>
    <div class="col-auto">
      <%= link_to "Back to Products", kuralis_products_path, class: "btn btn-outline-secondary" %>
    </div>
  </div>

  <% if @ai_assisted %>
  <div class="alert alert-info mb-4">
    <div class="d-flex align-items-center">
      <i class="fas fa-robot me-2 fa-lg"></i>
      <div>
        <strong>AI-Assisted Creation</strong>
        <p class="mb-0">This product was pre-filled using AI image analysis. Please review all details before saving, and don't forget to set your price.</p>
      </div>
    </div>
  </div>
  <% end %>

  <!-- Hidden input for AI analysis ID -->
  <% if @ai_assisted && @ai_analysis_id.present? %>
    <%= hidden_field_tag :ai_analysis_id, @ai_analysis_id %>
  <% end %>

  <!-- Hidden elements for server-prepared data -->
  <% if @ai_category_info.present? %>
    <div id="server-category-data" 
         data-category-id="<%= @ai_category_info[:id] %>"
         data-category-name="<%= @ai_category_info[:name] %>"
         data-category-path="<%= @ai_category_info[:full_path] %>"
         style="display: none;"></div>
  <% end %>

  <% if @image_from_analysis.present? %>
    <div id="server-image-data"
         data-image-url="<%= @image_from_analysis[:url] %>"
         data-image-filename="<%= @image_from_analysis[:filename] %>"
         style="display: none;"></div>
  <% end %>

  <% if @item_specifics_json.present? %>
    <script>
      // Make item specifics available to JavaScript
      window.serverPreparedItemSpecifics = <%= raw @item_specifics_json %>;
    </script>
  <% end %>

  <div class="card shadow mb-4">
    <div class="card-header py-3">
      <h6 class="m-0 font-weight-bold text-primary">Product Details</h6>
    </div>
    <div class="card-body">
      <%= form_with(model: @product, url: kuralis_products_path, local: true, class: "needs-validation", multipart: true) do |form| %>
        <% if @product.errors.any? %>
          <div class="alert alert-danger">
            <h4><%= pluralize(@product.errors.count, "error") %> prohibited this product from being saved:</h4>
            <ul>
              <% @product.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <!-- Nav tabs for product form sections -->
        <ul class="nav nav-tabs mb-4" id="productFormTabs" role="tablist">
          <li class="nav-item" role="presentation">
            <button class="nav-link active" id="basic-tab" data-bs-toggle="tab" data-bs-target="#basic-info" type="button" role="tab" aria-controls="basic-info" aria-selected="true">Basic Info</button>
          </li>
          <li class="nav-item" role="presentation">
            <button class="nav-link" id="ebay-tab" data-bs-toggle="tab" data-bs-target="#ebay-info" type="button" role="tab" aria-controls="ebay-info" aria-selected="false">eBay Listing</button>
          </li>
        </ul>

        <!-- Tab content -->
        <div class="tab-content" id="productFormTabContent">
          <!-- Basic Info Tab -->
          <div class="tab-pane fade show active" id="basic-info" role="tabpanel" aria-labelledby="basic-tab">
            <div class="row mb-4">
              <div class="col-md-12">
                <div class="form-group">
                  <label class="form-label fw-bold">Product Images</label>
                  <div class="image-upload-container" id="imageUploadContainer">
                    <div class="dropzone-container" id="dropzone">
                      <div class="dropzone-content text-center p-4">
                        <i class="fas fa-cloud-upload-alt fa-3x mb-3 text-muted"></i>
                        <p class="mb-1">Drag and drop images here</p>
                        <p class="text-muted small mb-3">or</p>
                        <label for="product_images" class="btn btn-outline-primary">
                          Browse Files
                        </label>
                        <%= form.file_field :images, multiple: true, class: "d-none", id: "product_images", accept: "image/*" %>
                        <p class="text-muted small mt-2">You can upload multiple images</p>
                      </div>
                    </div>
                    <div class="image-preview-container mt-3 d-flex flex-wrap" id="imagePreviewContainer">
                      <!-- Image previews will be inserted here -->
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.label :title, class: "form-label" %>
                  <%= form.text_field :title, class: "form-control", required: true %>
                  <div class="invalid-feedback">Title is required</div>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.label :sku, "SKU", class: "form-label" %>
                  <%= form.text_field :sku, class: "form-control" %>
                  <small class="form-text text-muted">Unique identifier for your product</small>
                </div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-12">
                <div class="form-group">
                  <%= form.label :description, class: "form-label" %>
                  <%= form.text_area :description, class: "form-control", rows: 4 %>
                </div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-4">
                <div class="form-group">
                  <%= form.label :base_price, "Price", class: "form-label" %>
                  <div class="input-group">
                    <span class="input-group-text">$</span>
                    <%= form.number_field :base_price, class: "form-control", step: "0.01", min: "0" %>
                  </div>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-group">
                  <%= form.label :base_quantity, "Quantity", class: "form-label" %>
                  <%= form.number_field :base_quantity, class: "form-control", min: "0", required: true %>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-group">
                  <%= form.label :weight_oz, "Weight (oz)", class: "form-label" %>
                  <%= form.number_field :weight_oz, class: "form-control", step: "0.01", min: "0" %>
                  <small class="form-text text-muted">Weight in ounces</small>
                </div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-4">
                <div class="form-group">
                  <%= form.label :brand, class: "form-label" %>
                  <%= form.text_field :brand, class: "form-control" %>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-group">
                  <%= form.label :condition, class: "form-label" %>
                  <%= form.select :condition, 
                      [
                        ["New", "New"], 
                        ["Used - Like New", "Used - Like New"],
                        ["Used - Very Good", "Used - Very Good"],
                        ["Used - Good", "Used - Good"],
                        ["Used - Acceptable", "Used - Acceptable"],
                        ["For Parts or Not Working", "For Parts or Not Working"]
                      ], 
                      { include_blank: "Select Condition" }, 
                      { class: "form-select" } 
                  %>
                </div>
              </div>
              <div class="col-md-4">
                <div class="form-group">
                  <%= form.label :location, class: "form-label" %>
                  <%= form.text_field :location, class: "form-control" %>
                  <small class="form-text text-muted">Storage location (e.g., "Shelf A3")</small>
                </div>
              </div>
            </div>

            <div class="row mb-3">
              <div class="col-md-12">
                <div class="form-group">
                  <%= form.label :tags, class: "form-label" %>
                  <%= form.text_field :tags, class: "form-control", placeholder: "Enter tags separated by commas" %>
                  <small class="form-text text-muted">Tags help categorize your products (e.g., "electronics, vintage, sale")</small>
                </div>
              </div>
            </div>
          </div>

          <!-- eBay Info Tab -->
          <div class="tab-pane fade" id="ebay-info" role="tabpanel" aria-labelledby="ebay-tab">
            <div class="row mb-3">
              <div class="col-md-12">
                <p class="text-muted mb-4">
                  Configure eBay-specific details for this product. These settings will be used when you list this product on eBay.
                </p>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.label :category_id, "eBay Category", class: "form-label" %>
                    <%= ebay_fields.text_field :category_id, 
                        class: "form-control", 
                        data: { 
                          ebay_category_selector: true, 
                          options: { placeholder: "Search for eBay category..." }.to_json 
                        } 
                    %>
                    <small class="form-text text-muted">Search for the most specific category for your product</small>
                  <% end %>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.label :store_category_id, "eBay Store Category", class: "form-label" %>
                    <%= ebay_fields.select :store_category_id, 
                        current_shop.shopify_ebay_account&.store_categories&.map { |c| [c["name"], c["category_id"]] } || [], 
                        { include_blank: "Select Store Category" }, 
                        { class: "form-select" } 
                    %>
                  <% end %>
                </div>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.label :condition_id, "eBay Condition", class: "form-label" %>
                    <%= ebay_fields.select :condition_id, 
                        [
                          ["New", "1000"],
                          ["New other (see details)", "1500"],
                          ["New with defects", "1750"],
                          ["Manufacturer refurbished", "2000"],
                          ["Seller refurbished", "2500"],
                          ["Used", "3000"],
                          ["Very Good", "4000"],
                          ["Good", "5000"],
                          ["Acceptable", "6000"],
                          ["For parts or not working", "7000"]
                        ], 
                        { include_blank: "Select Condition" }, 
                        { class: "form-select" } 
                    %>
                  <% end %>
                </div>
              </div>
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.label :listing_duration, "Listing Duration", class: "form-label" %>
                    <%= ebay_fields.select :listing_duration, 
                        [
                          ["Good 'Til Cancelled", "GTC"],
                          ["1 Day", "Days_1"],
                          ["3 Days", "Days_3"],
                          ["5 Days", "Days_5"],
                          ["7 Days", "Days_7"],
                          ["10 Days", "Days_10"],
                          ["30 Days", "Days_30"]
                        ], 
                        { include_blank: "Select Duration" }, 
                        { class: "form-select" } 
                    %>
                  <% end %>
                </div>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-6">
                <div class="form-group">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.label :shipping_profile_id, "Shipping Profile", class: "form-label" %>
                    <%= ebay_fields.select :shipping_profile_id, 
                        current_shop.shopify_ebay_account&.shipping_profiles&.map { |p| [p["profileName"], p["profileId"]] } || [], 
                        { include_blank: "Select Shipping Profile" }, 
                        { class: "form-select" } 
                    %>
                  <% end %>
                </div>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-12">
                <div class="form-group">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.label :condition_description, "Condition Description", class: "form-label" %>
                    <%= ebay_fields.text_area :condition_description, class: "form-control", rows: 3 %>
                    <small class="form-text text-muted">Provide details about the condition of your item</small>
                  <% end %>
                </div>
              </div>
            </div>
            
            <div class="row mb-3">
              <div class="col-md-12">
                <div class="form-check form-switch">
                  <%= form.fields_for :ebay_product_attribute do |ebay_fields| %>
                    <%= ebay_fields.check_box :best_offer_enabled, class: "form-check-input", role: "switch" %>
                    <%= ebay_fields.label :best_offer_enabled, "Enable Best Offer", class: "form-check-label" %>
                  <% end %>
                </div>
              </div>
            </div>
          </div>
        </div>
        
        <div class="d-grid gap-2 d-md-flex justify-content-md-end mt-4">
          <%= link_to "Cancel", kuralis_products_path, class: "btn btn-outline-secondary me-md-2" %>
          <%= form.submit "Create Product", class: "btn btn-primary" %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<style>
  .image-upload-container {
    width: 100%;
  }
  
  .dropzone-container {
    border: 2px dashed #ccc;
    border-radius: 8px;
    background-color: #f8f9fa;
    transition: all 0.3s ease;
  }
  
  .dropzone-container:hover, .dropzone-active {
    border-color: #4e73df;
    background-color: #f0f4ff;
  }
  
  .image-preview-container {
    gap: 10px;
  }
  
  .image-preview-item {
    position: relative;
    width: 150px;
    height: 150px;
    border-radius: 8px;
    overflow: hidden;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
  }
  
  .image-preview-item img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .image-preview-remove {
    position: absolute;
    top: 5px;
    right: 5px;
    background: rgba(255,255,255,0.8);
    border-radius: 50%;
    width: 25px;
    height: 25px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    color: #e74a3b;
    font-size: 14px;
  }
  
  .image-preview-remove:hover {
    background: rgba(255,255,255,1);
  }
  
  /* Item Specifics Styles */
  #ebay-item-specifics-container {
    border-top: 1px solid #e3e6f0;
    padding-top: 1.5rem;
    margin-top: 1.5rem;
  }
  
  #ebay-item-specifics-container h5 {
    color: #4e73df;
    font-weight: 600;
  }
  
  #ebay-item-specifics-container h6 {
    font-weight: 600;
  }
  
  .required-field-indicator {
    color: #e74a3b;
    margin-left: 3px;
  }
</style>

<script>
  // Initialize form validation
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('.needs-validation');
    const dropzone = document.getElementById('dropzone');
    const fileInput = document.getElementById('product_images');
    const previewContainer = document.getElementById('imagePreviewContainer');
    
    // Server-prepared data
    const serverCategoryData = document.getElementById('server-category-data');
    const serverImageData = document.getElementById('server-image-data');
    
    // Initialize both at once - no need for a separate function
    if (serverCategoryData) {
      console.log("Server-prepared category data detected, initializing...");
      setupCategoryFromServerData();
    }
    
    if (serverImageData) {
      console.log("Server-prepared image data detected, initializing...");
      displayServerProvidedImage();
    }
    
    // If we have AI data, switch to the eBay tab after a short delay
    if (serverCategoryData || serverImageData) {
      setTimeout(() => {
        const ebayTab = document.getElementById('ebay-tab');
        if (ebayTab) ebayTab.click();
      }, 500);
    }
    
    // Form validation
    form.addEventListener('submit', function(event) {
      if (!form.checkValidity()) {
        event.preventDefault();
        event.stopPropagation();
      }
      
      form.classList.add('was-validated');
    }, false);
    
    // Convert comma-separated tags input to array
    const tagsInput = document.querySelector('input[name="kuralis_product[tags]"]');
    if (tagsInput) {
      form.addEventListener('submit', function() {
        const tagsValue = tagsInput.value;
        if (tagsValue) {
          tagsInput.value = tagsValue.split(',').map(tag => tag.trim());
        }
      });
    }
    
    // Image upload functionality
    // Prevent default drag behaviors
    ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
      dropzone.addEventListener(eventName, preventDefaults, false);
      document.body.addEventListener(eventName, preventDefaults, false);
    });
    
    // Highlight drop area when item is dragged over it
    ['dragenter', 'dragover'].forEach(eventName => {
      dropzone.addEventListener(eventName, highlight, false);
    });
    
    ['dragleave', 'drop'].forEach(eventName => {
      dropzone.addEventListener(eventName, unhighlight, false);
    });
    
    // Handle dropped files
    dropzone.addEventListener('drop', handleDrop, false);
    
    // Handle file input change
    fileInput.addEventListener('change', handleFiles, false);
    
    function preventDefaults(e) {
      e.preventDefault();
      e.stopPropagation();
    }
    
    function highlight() {
      dropzone.classList.add('dropzone-active');
    }
    
    function unhighlight() {
      dropzone.classList.remove('dropzone-active');
    }
    
    function handleDrop(e) {
      const dt = e.dataTransfer;
      const files = dt.files;
      
      handleFiles({ target: { files: files } });
    }
    
    function handleFiles(e) {
      const files = [...e.target.files];
      
      files.forEach(previewFile);
      
      // Update the actual file input with the new files
      // This is a bit tricky since we can't directly modify the files property
      // In a real implementation, you might need to use FormData when submitting
    }
    
    function previewFile(file) {
      if (!file.type.match('image.*')) return;
      
      const reader = new FileReader();
      
      reader.onload = function(e) {
        const preview = document.createElement('div');
        preview.className = 'image-preview-item';
        
        const img = document.createElement('img');
        img.src = e.target.result;
        
        const removeBtn = document.createElement('div');
        removeBtn.className = 'image-preview-remove';
        removeBtn.innerHTML = '<i class="fas fa-times"></i>';
        removeBtn.addEventListener('click', function() {
          preview.remove();
          // In a real implementation, you would also need to update the actual file input
        });
        
        preview.appendChild(img);
        preview.appendChild(removeBtn);
        previewContainer.appendChild(preview);
      }
      
      reader.readAsDataURL(file);
    }
    
    // Function to display server-provided image in the form
    function displayServerProvidedImage() {
      if (!serverImageData) return;
      
      const imageUrl = serverImageData.dataset.imageUrl;
      const imageFilename = serverImageData.dataset.imageFilename;
      
      if (!imageUrl) {
        console.warn("No image URL provided in server data");
        return;
      }
      
      console.log("Creating image preview for:", imageUrl);
      
      // Create and display the image preview
      const preview = document.createElement('div');
      preview.className = 'image-preview-item';
      
      const img = document.createElement('img');
      img.src = imageUrl;
      
      const removeBtn = document.createElement('div');
      removeBtn.className = 'image-preview-remove';
      removeBtn.innerHTML = '<i class="fas fa-times"></i>';
      removeBtn.addEventListener('click', function() {
        preview.remove();
      });
      
      preview.appendChild(img);
      preview.appendChild(removeBtn);
      previewContainer.appendChild(preview);
      
      // Create a hidden input to ensure the image is attached to the product
      const hiddenImageInput = document.createElement('input');
      hiddenImageInput.type = 'hidden';
      hiddenImageInput.name = 'attach_analysis_image';
      hiddenImageInput.value = 'true';
      form.appendChild(hiddenImageInput);
      
      // Simplify the dropzone UI to show it's for additional images
      const dropzoneContent = dropzone.querySelector('.dropzone-content');
      if (dropzoneContent) {
        dropzoneContent.innerHTML = `
          <p class="mb-1 text-muted">Add more images (optional)</p>
          <label for="product_images" class="btn btn-outline-primary btn-sm">
            Browse Files
          </label>
        `;
      }
    }
    
    // Function to setup eBay category from server data
    function setupCategoryFromServerData() {
      if (!serverCategoryData) return;
      
      // Get category data from server
      const categoryId = serverCategoryData.dataset.categoryId;
      const categoryName = serverCategoryData.dataset.categoryName;
      const categoryPath = serverCategoryData.dataset.categoryPath;
      
      if (!categoryId) {
        console.warn("No category ID provided in server data");
        return;
      }
      
      console.log("Setting up eBay category:", { categoryId, categoryName, categoryPath });
      
      // Find the category selector element
      const categorySelector = document.querySelector('[data-ebay-category-selector="true"]');
      if (!categorySelector) {
        console.error("Category selector element not found");
        return;
      }
      
      // Directly set the category without API calls since we already have all data from server
      setCategory(categoryId, categoryName, categoryPath);
      
      // Function to set the category in the form
      function setCategory(id, name, fullPath) {
        console.log("Setting category:", id, name, fullPath);
        
        // Store the category ID in a hidden input
        let hiddenCategoryInput = document.querySelector('input[name="kuralis_product[ebay_product_attribute_attributes][category_id]"][type="hidden"]');
        
        if (!hiddenCategoryInput) {
          // Create a hidden input to store the real value
          hiddenCategoryInput = document.createElement('input');
          hiddenCategoryInput.type = 'hidden';
          hiddenCategoryInput.name = 'kuralis_product[ebay_product_attribute_attributes][category_id]';
          categorySelector.parentNode.appendChild(hiddenCategoryInput);
        }
        
        // Set the category ID
        hiddenCategoryInput.value = id;
        
        // Create or update the display element to show the selected category
        let displayElement = categorySelector.parentNode.querySelector('.selected-category');
        
        if (!displayElement) {
          displayElement = document.createElement('div');
          displayElement.classList.add('selected-category', 'mt-2');
          categorySelector.parentNode.appendChild(displayElement);
        }
        
        // Update the display with category information
        displayElement.innerHTML = `
          <div class="p-2 border rounded">
            <div class="d-flex justify-content-between align-items-center">
              <div>
                <div class="fw-bold">${name || 'eBay Category'}</div>
                ${fullPath ? `<div class="text-muted small">${fullPath}</div>` : ''}
                <div class="text-muted small">ID: ${id}</div>
              </div>
              <button type="button" class="btn btn-sm btn-outline-secondary change-category-btn">
                Change
              </button>
            </div>
          </div>
        `;
        
        // Hide the original input since we're displaying the selected category
        categorySelector.style.display = 'none';
        
        // Add event listener to the change button
        const changeBtn = displayElement.querySelector('.change-category-btn');
        if (changeBtn) {
          changeBtn.addEventListener('click', function() {
            // Show the original input
            categorySelector.style.display = '';
            // Hide the display element
            displayElement.style.display = 'none';
            // Clear the hidden input so the new selection will be used
            hiddenCategoryInput.value = '';
          });
        }
        
        // Load item specifics for this category
        loadItemSpecifics(id);
      }
    }
    
    // Function to load item specifics for a category
    function loadItemSpecifics(categoryId) {
      console.log("Loading item specifics for category:", categoryId);
      
      // First check if we already have server-prepared item specifics
      if (window.serverPreparedItemSpecifics) {
        displayItemSpecifics(window.serverPreparedItemSpecifics);
        return;
      }
      
      // Otherwise fetch from the server
      fetch(`/kuralis/ebay_categories/${categoryId}/item_specifics`, {
        headers: {
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error('Failed to fetch item specifics');
        }
        return response.json();
      })
      .then(data => {
        console.log("Fetched item specifics:", data);
        displayItemSpecifics(data.item_specifics || []);
      })
      .catch(error => {
        console.error("Error loading item specifics:", error);
      });
      
      // Display item specifics in the form
      function displayItemSpecifics(specifics) {
        // Find or create the item specifics container
        let specificContainer = document.getElementById('ebay-item-specifics-container');
        
        if (!specificContainer) {
          specificContainer = document.createElement('div');
          specificContainer.id = 'ebay-item-specifics-container';
          specificContainer.className = 'mt-4 pt-4 border-top';
          
          // Find a good place to append it
          const ebayTab = document.getElementById('ebay-info');
          if (ebayTab) ebayTab.appendChild(specificContainer);
        }
        
        // No specifics to display
        if (!specifics || specifics.length === 0) {
          specificContainer.innerHTML = `
            <h5 class="mb-3">Item Specifics</h5>
            <p class="text-muted">No item specifics available for this category.</p>
          `;
          return;
        }
        
        // Start building the HTML for item specifics
        let specificHtml = `
          <h5 class="mb-3">Item Specifics</h5>
          <div class="row">
        `;
        
        // Add fields for each item specific
        specifics.forEach(specific => {
          const isRequired = specific.required;
          const fieldName = `kuralis_product[ebay_product_attribute_attributes][item_specifics][${specific.name}]`;
          const value = specific.value || '';
          
          specificHtml += `
            <div class="col-md-6 mb-3">
              <div class="form-group">
                <label class="form-label">
                  ${specific.name}
                  ${isRequired ? '<span class="required-field-indicator">*</span>' : ''}
                </label>
                <input 
                  type="text" 
                  name="${fieldName}" 
                  class="form-control" 
                  value="${value}"
                  ${isRequired ? 'required' : ''}
                >
                ${specific.help_text ? `<small class="text-muted">${specific.help_text}</small>` : ''}
              </div>
            </div>
          `;
        });
        
        specificHtml += `</div>`;
        specificContainer.innerHTML = specificHtml;
      }
    }
  });
</script> 